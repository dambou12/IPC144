/* -------------------------------------------
Name:           
Student number: 
Email:          
Section:        
Date:           
----------------------------------------------
Assignment: 2
Milestone:  4
---------------------------------------------- */

#define _CRT_SECURE_NO_WARNINGS

#include <stdio.h>
#include "contactHelpers.h"
#include"contacts.h"
// This source file needs to "know about" the SYSTEM string library functions.
// HINT: The library name is string.h.
//       #include the string.h header file on the next line:
#include <string.h>

// ----------------------------------------------------------
// Include your contactHelpers header file on the next line:



// ----------------------------------------------------------
// define MAXCONTACTS for sizing contacts array (5):
#define MAXCONTACTS 5 


//------------------------------------------------------
// Function Definitions
//------------------------------------------------------

// +-------------------------------------------------+
// | NOTE:  Copy/Paste your Assignment-2 Milestone-3 |
// |        function definitions below...            |
// +-------------------------------------------------+


// Clear the standard input buffer
void clearKeyboard(void)
{
	while (getchar() != '\n');
}

void pause(void) {
  printf("(Press Enter to Continue)");

	clearKeyboard();
       
}

// getInt: Empty function definition goes her
int getInt(void) {
	int value;
	char NL;
	NL = 'x';
	while (NL != '\n') {
		scanf("%d%c", &value, &NL);
		if (NL != '\n') {
			clearKeyboard();
			printf("***INVALID INTEGER *** <Please enter an integer>: ");
		}

	}
	return value;
}

// getIntInRange: Empty function definition goes here:
int getIntInRange(int num1, int num2) {
	int integer;
	int returnvalue = 0;
	do
	{
		integer = getInt();
		if ((integer >= num1) && (integer <= num2))
			returnvalue = 1;


		if ((integer < num1) || (integer > num2))

			printf("*** OUT OF RANGE *** <Enter a number between %d and %d>: ", num1, num2);

	} while (returnvalue == 0);
	return integer;
}


// yes: Empty function definition goes here:
int yes(void) {
	char answer;
	char NL='x';
	int boolean=0;
	int input;
	do {
		scanf("%c%c", &answer, &NL);

		if (NL != '\n') {
			
			printf("*** INVALID ENTRY *** <Only (Y)es or (N)o are acceptable>: ");
			boolean = 1;
		       
			
		}else  {
			switch (answer){
			case 'y':
			case 'Y':
				input = 1;
				boolean = 0;
				break;
			case 'n':
			case 'N':
				input = 0;
				boolean = 0;
				break;
			}
			

		}
			

		

	} while (boolean == 1);
	return input;
}



// menu: Empty function definition goes here:
int menu(void) {
	int option;
	printf("Contact Management System\n");
	printf("-------------------------\n");
	printf("1. Display contacts\n");
	printf("2. Add a contact\n");
	printf("3. Update a contact\n");
	printf("4. Delete a contact\n");
	printf("5. Search contacts by cell phone number\n");
	printf("6. Sort contacts by cell phone number\n");
	printf("0. Exit\n\n");
	printf("Select an option:> ");

	option = getIntInRange(0, 6);
	printf("\n");
	return option;
}


// ContactManagerSystem: Empty function definition goes here:
void ContactManagerSystem(void)
{

	struct Contact contact[MAXCONTACTS]  = 
	{ { { "Rick",{ '\0' }, "Grimes" },
	{ 11, "Trailer Park", 0, "A7A 2J2", "King City" },
	{ "4161112222", "4162223333", "4163334444" } },
	{
		{ "Maggie", "R.", "Greene" },
		{ 55, "Hightop House", 0, "A9A 3K3", "Bolton" },
		{ "9051112222", "9052223333", "9053334444" } },
		{
			{ "Morgan", "A.", "Jones" },
			{ 77, "Cottage Lane", 0, "C7C 9Q9", "Peterborough" },
			{ "7051112222", "7052223333", "7053334444" } },
			{
				{ "Sasha",{ '\0' }, "Williams" },
				{ 55, "Hightop House", 0, "A9A 3K3", "Bolton" },
				{ "9052223333", "9052223333", "9054445555" } },
	};
	int option = 0;
	int answer = 0;
	int boolean =0;
	do
	{
		option = menu();
	       
		switch (option) {
		case 1:
	     
		     displayContacts(contact, MAXCONTACTS);      
	    //printf("\b");
		     pause();
		     printf("\n");
		     break;
		case 2:
			
			addContact(contact, MAXCONTACTS);
			pause();
			printf("\n");
			break;
		case 3:
			       
		 updateContact(contact, MAXCONTACTS);
			pause();
			printf("\n");
			break;
		case 4:
		       
			deleteContact(contact, MAXCONTACTS);
			pause();
			printf("\n");
			break;
		case 5:
			searchContacts(contact, MAXCONTACTS);
			pause();
			printf("\n");
			break;
		case 6:
		       sortContacts(contact,MAXCONTACTS);
		       printf("\n");
			pause();
		       printf("\n");
			break;
		case 0:
			printf("Exit the program? (Y)es/(N)o: ");
			answer = yes();
			printf("\n");

			if (answer == 1) {
			  
				printf("Contact Management System: terminated\n");
			       printf("\n");
			       boolean = 1;
			 } 
			   
			
			 
			

		}

	} while (boolean == 0);
}

// +-------------------------------------------------+
// | NOTE:  Copy/Paste your Assignment-2 Milestone-3 |
// |        empty function definitions below...      |
// +-------------------------------------------------+

// getTenDigitPhone:
void getTenDigitPhone(char telNum[]) {

	int ninput = 1;

	  while(ninput == 1) {

		scanf("%10s", telNum);

		clearKeyboard();
		

		if (strlen(telNum) == 10)
			ninput = 0;
		else
		
			printf("Enter a 10-digit phone number: ");

		}
	}




// findContactIndex:
int findContactIndex(const struct Contact contact[], int size, const char telNum[]) {
	int b=0;
	int a;
	for (b = 0; b < size; b++) {

		//scanf("%c%c", contact, telNum);
		a = strcmp(contact[b].numbers.cell, telNum);

		if (a == 0) {

			return  b;

		}
	}
		
	return -1;
}

// displayContactHeader
void displayContactHeader(void) {

	printf("+-----------------------------------------------------------------------------+\n");
	printf("|                              Contacts Listing                               |\n");
	printf("+-----------------------------------------------------------------------------+\n");
}

// displayContactFooter
void displayContactFooter(int totalContact) {
    printf("+-----------------------------------------------------------------------------+\n");
    printf("Total contacts: %d\n\n", totalContact);
}
// displayContact:
void displayContact(const struct Contact* contact) {
	if (contact->name.middleInitial[0] != '\0') {
		printf(" %s %s %s\n", contact->name.firstName, contact->name.middleInitial, contact->name.lastName);
	}
	else {
		printf(" %s %s\n", contact->name.firstName, contact->name.lastName);
	}
	printf("    C: %-10s   H: %-10s   B: %-10s\n", contact->numbers.cell, contact->numbers.home, contact->numbers.business);
	printf("       %d %s, ", contact->address.streetNumber, contact->address.street);
	if (contact->address.apartmentNumber > 0) {
		printf("Apt# %d, ", contact->address.apartmentNumber);
	}
	printf("%s, %s\n", contact->address.city, contact->address.postalCode);
}


// displayContacts:
void displayContacts(const struct Contact contact[], int num) {
	
	int i;
	int totalContact = 0;

	displayContactHeader();

	for (i = 0; i < num ; i++) {
		
		if (strlen(contact[i].numbers.cell) > 0){

			displayContact(&contact[i]);
			totalContact ++;
		}
	}
	displayContactFooter(totalContact);

}

// searchContacts:
void searchContacts(const struct Contact contact[], int size) {
	int storeindex =0;
	
	char celnum[11];
	//char contact;
	printf("Enter the cell number for the contact: ");
    getTenDigitPhone(celnum);
	storeindex = findContactIndex(contact, size, celnum);
		if (storeindex == -1) {
			printf("*** Contact NOT FOUND ***\n");
		}
		else  {
			printf("\n");
			displayContact(&contact[storeindex]);
			printf("\n");
	}
	 
	 
}

// addContact:
void addContact(struct Contact contact[], int size) {
	int newContact;
	char emptyindex[11] = {'\0'};
	struct Contact metContact = { {{0}} };
	newContact = findContactIndex(contact, size, emptyindex);
		if (newContact!=-1){
			getContact(&metContact);
			contact[newContact] = metContact;
			printf("--- New contact added! ---\n");
	      }
	      
		else  {
		    
			  printf("*** ERROR: The contact list is full! ***\n");
	   }
	//}
}

// updateContact:
void updateContact(struct Contact contact[], int size) {
	int contactindex;
	int contactin;
	int input=0;
	char contactinput[11] = {'\0'};

	  printf("Enter the cell number for the contact: ");
	  getTenDigitPhone(contactinput);
	  contactindex = findContactIndex(contact,size,contactinput);
	  contactin = findContactIndex(contact, size, contactinput);

	  if (contactin == -1) {
       
		  printf("*** Contact NOT FOUND ***\n");
	  }
	  else  {

		  printf("\nContact found:\n");
			  
		  displayContact(&contact[contactindex]);
		 printf("\n");
		  printf("Do you want to update the name? (y or n): ");
		  input = yes();
		
		  if (input == 1) {
			  
			  getName(&contact[contactindex].name);
		   }
		  //}
		  printf("Do you want to update the address? (y or n): ");
		  input = yes();

		    if (input == 1) {
			 
			   getAddress(&contact[contactindex].address);
		   }
			printf("Do you want to update the numbers? (y or n): ");
			input = yes();

			if (input == 1) {
				*contact[contactindex].numbers.cell = '\0';
				*contact[contactindex].numbers.home = '\0';
				*contact[contactindex].numbers.business = '\0';

				getNumbers(&contact[contactindex].numbers);
			}
			printf("--- Contact Updated! ---\n");


		  }
}

// deleteContact:
void deleteContact(struct Contact contact[], int a) {
	int input = 0;
	
	int contactindex;
	char contactinput[11] = {'\0'};

	printf("Enter the cell number for the contact: ");
	getTenDigitPhone(contactinput);

  contactindex = findContactIndex(contact, a, contactinput);
	
	if (contactindex == -1) {
      
		printf("*** Contact NOT FOUND ***\n");

	}
	else  {

	      
		  printf("\nContact found:\n");
		  displayContact(&contact[contactindex]);
		  printf("\n");

		  printf("CONFIRM: Delete this contact? (y or n): ");
		  input = yes();
		  if (input == 1){
		       contact[contactindex].numbers.cell[0] = '\0';
       
		  printf("--- Contact deleted! ---\n");

		  }


	}




}

// sortContacts:
void sortContacts(struct Contact contact[], int size) {
	int i;
	int a;
	struct Contact helps;
	for (i = size - 1; i > 0; i--) {
		for (a = 0; a < i; a++) {

			if (strcmp(contact[a].numbers.cell, contact[a + 1].numbers.cell) > 0) {

				helps = contact[a];
				contact[a] = contact[a + 1];
				contact[a + 1] = helps;
			}
		}


	}


	printf("--- Contacts sorted! ---");



}
